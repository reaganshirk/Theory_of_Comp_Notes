* Theorem: The class of regular languages is closed under the union operation. In other words, if A1 and A2 are regular languages, then so is A1 union A2. (Same alphabet sigma)
* Proof:
	* Helpful knowledege:
		* Regular language L --> there is some machine that
		understands L. There exists a finite automaton M such
		that L = L(M)
		* x belongs to A union B <--> x belongs to A or x
		belongs to B
	* Construct a new finite automaton M that recognizes A1
	union A2. Simulate both M1 that recognizes A1 and M2 that
	recognizes A2 on any input w. Then if either of the two
	accepts, we accept. Otherwise we reject. 
	* We have M1 = (Q1, sigma, delta1, q1, F1) recognizes A1.
	* We have M2 = (Q2, sigma, delta2, q2, F2) recognizes A2.
	* Look at the cartesian product of the states Q1 x Q2, a
	state q in Q is of the form (r, s) where r is in Q1 and
	s is in Q2
	* Starting state: q0 = (q1, q2)
	* For the machine M we have
	delta((r, s), x) = (delta1(r, x), delta2(s, x)) where
	(r, s) is a state in Q and x is a sybmol in sigma
	* F for M is (F1 x Q2) union (Q1 x F2)
	* Is F1 x F2 useful?
		* I don't fucking know
		* Ah, it is the intersection rather than the union
		* Proves intersection theorem
* Regular Operators
	* union, concatenation, star
	* Can we give the same proof as above for concatenation? 
		* I don't even understand the first proof so I'm not
		the right person to ask.
	* NFA: nondeterministic finite automaton. May have:
		* multiple arrows leaving from a state with the same 
		symbol
		* not all arrows for some symbols are listed
		* many have 0, 1, or more arrows from its state with
		the symbol lambda (the empty string)
	* DFA: deterministic finite automaton can be seen as
	"parallel computation" with all the different machines
	running in parallel.
		* as a tree of possibilities
* How NFAs compute
	* we reach a state with multiple ways to proceed
		* then the machine "splits" itself and follows each
		path independently or in parallel
	* We reach a state where no branch corresponds to the symbol
	that we read
		* the particular copy of the machine dies
	* If any of the copies of the machine are in an accept state
	at the end of the input
		* the NFA accepts
	* States with a lambda symbol on an exiting arrow
		* the machine "splits" into multiple copies
* Example
	* Start in q1, stay there if 0 or 1. If 1 go to q2, if 0 or
	lambda go to q3, if 1 go to q4 (accepting state), stay there
	if 0 or 1
	* Input: 010110
	* Start: q1. Read a 0, stay in q1. Read a 1, split into q1
	and q2. Once you're in q2 you reach a lambda so you can
	split again into q3. Now you have three states running in
	parallel: q1, q2, q3. q1 goes to q1, q2 goes to q3, q3 dies.
	q1 creates a split into q1, q2, q3. q2 goes to q4. Input is 
	accepted because it reaches an accepted state but we keep
	going because there is more input to read. q1 gives q1, q2,
	q3. q2 dies with a 1, q3 goes to q4. q4 stays in q4. q1
	splits into q1, q2 goes to q3, q3 dies, q4 stays. String is
	accepted.
		* hopefully this makes a little bit of sense
* Example
	* Let A be the language that has all binary strings that
	have a 1, three positions from the end of the string. 
	(e.g. 00101 belongs to a, 11011 does not belong to A)
	* NFA for A
		* start at q1. If 0,1 stay, if 1 go to q2. If 0, 1
		move to q3. If 0, 1 move to accepting state q4. 
	* DFA for A
		* start at q000. Stay if 0, move to q001 if 1. 
		from q001 if 0 move to q010, if 1 move to q011.
		From q010 if 0 move to q101 if 1 move to q101.
		from q011 if 0 move to q110 if 1 move to q111.
		from q100 if 0 move to q000 if 1 move to q001.
		from q101 if 0 move to q010 if 1 move to q011.
		from q110 if 0 move to q100 if 1 move to q101.
		from q111 if 0 move to q110 if 1 stay
			* I probably didn't follow that correctly, I'm
			incredibly lost.
* TA Office Hours
	* Krishna: TUE 10:30-12:30
	* Mohammad: WED 11:00-1:00
	* Both in DEH 115
	* Office hours, names, emails are on website